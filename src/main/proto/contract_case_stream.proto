syntax = "proto3";

package io.contract_testing.contractcase.grpc;

option java_package = "io.contract_testing.contractcase.grpc";

import "google/protobuf/struct.proto";

message ContractCaseConfig {
  message UsernamePassword {
    string username = 1;
    string password = 2;
  }

  string provider_name = 1;
  string consumer_name = 2;
  string log_level = 3;
  string contract_dir = 4;
  string contract_filename = 5;
  string publish = 6;
  string broker_ci_access_token = 7;
  string broker_base_url = 8;
  UsernamePassword broker_basic_auth = 9;

  bool print_results = 10;
  bool throw_on_fail = 11;

  repeated StateHandlerHandle state_handlers = 12;
  map<string, TriggerFunctionHandle> trigger_and_tests = 13;

  TriggerFunctionHandle trigger_and_test = 14;

  string base_url_under_test = 15; // Long term, this will be moved
}

message ResultSuccess {
}
message ResultSuccessHasMapPayload {
  google.protobuf.Struct map = 1;
}
message ResultSuccessHasAnyPayload {
  google.protobuf.Value payload = 1;
}
message ResultFailure {
  string kind = 1;
  string message = 2;
  string location = 3;
}

message BoundaryResult {
  oneof value {
    ResultSuccess success = 1;
    ResultSuccessHasMapPayload success_has_map = 2;
    ResultSuccessHasAnyPayload success_has_any = 3;
    ResultFailure failure = 4;
  }
}

message StateHandlerHandle {
  enum Stage {
    STAGE_SETUP_UNSPECIFIED = 0;
    STAGE_TEARDOWN = 1;
  }
  // The name of the state
  string handle = 1;
  // Whether this is a setup or a teardown handler
  Stage stage = 2;
}

message TriggerFunctionHandle {
  string handle = 1;
}

// Requests from client
message BeginDefinitionRequest {
  ContractCaseConfig config = 1;
  repeated string caller_versions = 4;
}

message RunExampleRequest {
  google.protobuf.Struct example_definition = 2;
  ContractCaseConfig config = 3;
}

message RunRejectingExampleRequest {
  google.protobuf.Struct example_definition = 2;
  ContractCaseConfig config = 3;
}

message StripMatchersRequest {
  google.protobuf.Struct matcher_or_data = 2;
}

message EndDefinitionRequest {
}

message StateHandlerResponse {
  StateHandlerHandle state_handler_handle = 1;
  BoundaryResult result = 2;
}

message LogPrinterResponse {
  BoundaryResult result = 1;
}
message ResultPrinterResponse {
  BoundaryResult result = 1;
}

// Responses from server

message RunStateHandlerRequest {
  StateHandlerHandle state_handler_handle = 1;
}
message TriggerFunctionRequest {
  TriggerFunctionHandle trigger_function = 1;
  google.protobuf.Struct config = 2;
}

message LogRequest {
  /**
   * A `LogLevel` string, either `error`, `warn`, `debug`,
   * `maintainerDebug` or `deepMaintainerDebug` Use this to programmatically
   * decide any colour formatting.. (although `none` is a possible log level,
   * this function will never be called with `none`).
   */
  string level = 1;
  /**
   * The timestamp generated by ContractCase, ready for printing. No extra
   * formatting is necessary
   */
  string timestamp = 2;
  /**
   * The version string for the current ContractCase stack (at low log levels,
   * this is just the core version)
   */
  string version = 3;
  /**
   * A rendered version of the LogLevel. Do not rely on this value
   * programmatically, use the `level` parameter instead.
   */
  string type_string = 4;
  /**
   * A string that represents the location that this log came from
   */
  string location = 5;
  /**
   * The main message of this log line
   */
  string message = 6;
  /**
   * Any additional output to print on extra lines (you may want to indent this
   * when printing)
   */
  string additional = 7;
}

message PrintMatchErrorRequest {
  /**
   * The red highlighted blob, eg "MATCHING ERROR" or "TRIGGER FUNCTION ERROR".
   * Could be any string.
   */
  string kind = 1;
  /**
   * A summary of the error. Could be any string.
   */
  string message = 2;
  /**
   * The location the error happened, for printing at the top of the error
   * message
   */
  string location = 3;
  /**
   * The tag line for the location the error happened, for printing after the
   * error message. This might have more information than the `location` above.
   */
  string location_tag = 4;
  /**
   * The machine-readable type for the cause of this error, for printing after
   * the error message to make it easy to search for.
   */
  string error_type_tag = 5;
  /**
   * A string representation of the expected data (may contain newlines)
   */
  string expected = 6;
  /**
   * A string representation of the actual data received (may contain newlines)
   */
  string actual = 7;
}

message PrintMessageErrorRequest {
  /**
   * The red highlighted blob, eg "MATCHING ERROR" or "TRIGGER FUNCTION ERROR".
   * Could be any string.
   */
  string kind = 1;
  /**
   * A summary of the error. Could be any string.
   */
  string message = 2;
  /**
   * The location the error happened, for printing at the top of the error
   * message
   */
  string location = 3;
  /**
   * The tag line for the location the error happened, for printing after the
   * error message. This might have more information than the `location` above.
   */
  string location_tag = 4;
  /**
   * The machine-readable type for the cause of this error, for printing after
   * the error message to make it easy to search for.
   */
  string error_type_tag = 5;
}

message PrintTestTitleRequest {
  /**
   * Either 'success' to indicate success, or 'failure' to indicate failure
   */
  string kind = 1;
  /**
   * An icon for the start of the line (usually a single character emoji, but
   * could be any string)
   */
  string icon = 2;
  /**
   * The title to print (will not include newlines)
   */
  string title = 3;
  /**
   * Any additional text to print after the title (may include newlines)
   */
  string additional_text = 4;
}

message BeginDefinitionResponse {
  BoundaryResult result = 1;
}
message RunExampleResponse {
  BoundaryResult result = 1;
}
message RunRejectingExampleResponse {
  BoundaryResult result = 1;
}
message StripMatchersResponse {
  BoundaryResult result = 1;
}
message EndDefinitionResponse {
  BoundaryResult result = 1;
}
message TriggerFunctionResponse {
  BoundaryResult result = 1;
}

message DefinitionRequest {
  string id = 1;
  oneof kind {
    // From user calls
    BeginDefinitionRequest begin_definition = 2;
    RunExampleRequest run_example = 3;
    RunRejectingExampleRequest run_rejecting_example = 4;
    StripMatchersRequest strip_matchers = 5;
    EndDefinitionRequest end_definition = 6;
    // Answering server questions
    StateHandlerResponse state_handler_response = 7;
    LogPrinterResponse log_printer_response = 8;
    ResultPrinterResponse result_printer_response = 9;
    TriggerFunctionResponse trigger_function_response = 10;
  }
}

message DefinitionResponse {
  string id = 1;
  oneof kind {
    // These could come at any time
    RunStateHandlerRequest run_state_handler = 2;
    LogRequest log_request = 3;
    PrintMatchErrorRequest print_match_error_request = 4;
    PrintMessageErrorRequest print_message_error_request = 5;
    PrintTestTitleRequest print_test_title_request = 6;
    TriggerFunctionRequest trigger_function_request = 12;
    // These indicate the end of an RPC call
    BeginDefinitionResponse begin_definition_response = 7;
    RunExampleResponse run_example_response = 8;
    RunRejectingExampleResponse run_rejecting_example_response = 9;
    StripMatchersResponse strip_matchers_response = 10;
    EndDefinitionResponse end_definition_response = 11;
  }
}

service ContractCase {
  rpc ContractDefinition(stream DefinitionRequest)
      returns (stream DefinitionResponse) {}
}
